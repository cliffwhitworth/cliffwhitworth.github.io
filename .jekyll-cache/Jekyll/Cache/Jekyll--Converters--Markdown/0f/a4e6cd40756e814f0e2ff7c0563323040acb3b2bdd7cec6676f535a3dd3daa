I"*@<p><br /></p>
<h4>Kernel PCA</h4>

<p><a href="http://scikit-learn.org/stable/auto_examples/decomposition/plot_kernel_pca.html">
Sklearn
</a>
<br />
<a href="https://www.kaggle.com/lambdaofgod/kernel-pca-examples">
Kaggle Examples
</a></p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby">  <span class="c1"># Split the dataset</span>
  <span class="c1"># Feature scaling</span>

  <span class="c1"># Apply Kernel</span>
  <span class="n">from</span> <span class="n">sklearn</span><span class="p">.</span><span class="nf">decomposition</span> <span class="n">import</span> <span class="no">KernelPCA</span>
  <span class="c1"># kpca = KernelPCA(kernel="rbf", fit_inverse_transform=True, gamma=10)</span>
  <span class="c1"># X_kpca = kpca.fit_transform(X)</span>
  <span class="c1"># X_back = kpca.inverse_transform(X_kpca)</span>
  <span class="c1"># pca = PCA()</span>
  <span class="c1"># X_pca = pca.fit_transform(X)</span>
  <span class="n">kpca</span> <span class="o">=</span> <span class="no">KernelPCA</span><span class="p">(</span><span class="n">n_components</span> <span class="o">=</span> <span class="mi">2</span><span class="p">,</span> <span class="n">kernel</span> <span class="o">=</span> <span class="s1">'rbf'</span><span class="p">)</span>
  <span class="no">X_train</span> <span class="o">=</span> <span class="n">kpca</span><span class="p">.</span><span class="nf">fit_transform</span><span class="p">(</span><span class="no">X_train</span><span class="p">)</span>
  <span class="no">X_test</span> <span class="o">=</span> <span class="n">kpca</span><span class="p">.</span><span class="nf">transform</span><span class="p">(</span><span class="no">X_test</span><span class="p">)</span>

  <span class="c1"># Fit Logistic Regression to the Training set</span></code></pre></figure>

<p><br /></p>
<h4>Linear Discriminant Analysis</h4>

<p><a href="http://scikit-learn.org/stable/modules/lda_qda.html">
Sklearn
</a>
<br />
<a href="https://machinelearningmastery.com/linear-discriminant-analysis-for-machine-learning/">
Linear Discriminant Analysis
</a>
<br />
<a href="https://elitedatascience.com/dimensionality-reduction-algorithms">
Supervised Feature Extraction
</a></p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby">  <span class="c1"># Split the dataset</span>
  <span class="c1"># Feature scaling</span>

  <span class="n">from</span> <span class="n">sklearn</span><span class="p">.</span><span class="nf">discriminant_analysis</span> <span class="n">import</span> <span class="no">LinearDiscriminantAnalysis</span> <span class="n">as</span> <span class="no">LDA</span>

  <span class="n">lda</span> <span class="o">=</span> <span class="no">LDA</span><span class="p">(</span><span class="n">n_components</span> <span class="o">=</span> <span class="mi">2</span><span class="p">)</span>
  <span class="c1"># X_r2 = lda.fit(X, y).transform(X)</span>
  <span class="no">X_train</span> <span class="o">=</span> <span class="n">lda</span><span class="p">.</span><span class="nf">fit_transform</span><span class="p">(</span><span class="no">X_train</span><span class="p">,</span> <span class="n">y_train</span><span class="p">)</span>
  <span class="no">X_test</span> <span class="o">=</span> <span class="n">lda</span><span class="p">.</span><span class="nf">transform</span><span class="p">(</span><span class="no">X_test</span><span class="p">)</span>

  <span class="c1"># Fit Logistic Regression to the Training set</span></code></pre></figure>

<p><br /></p>
<h4>Principal Component Analysis</h4>

<p><a href="http://scikit-learn.org/stable/auto_examples/decomposition/plot_pca_vs_lda.html#sphx-glr-auto-examples-decomposition-plot-pca-vs-lda-py">
Sklearn
</a>
<br />
<a href="http://setosa.io/ev/principal-component-analysis/">
Principal Component Analysis
</a>
<br />
<a href="https://elitedatascience.com/dimensionality-reduction-algorithms">
Unsupervised Feature Extraction
</a></p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby">  <span class="c1"># Split the dataset</span>
  <span class="c1"># Feature scaling</span>

  <span class="n">from</span> <span class="n">sklearn</span><span class="p">.</span><span class="nf">decomposition</span> <span class="n">import</span> <span class="no">PCA</span>

  <span class="n">pca</span> <span class="o">=</span> <span class="no">PCA</span><span class="p">(</span><span class="n">n_components</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
  <span class="c1"># X_r = pca.fit(X).transform(X)</span>
  <span class="no">X</span> <span class="o">=</span> <span class="n">pca</span><span class="p">.</span><span class="nf">fit_transform</span><span class="p">(</span><span class="no">X_train</span><span class="p">)</span>
  <span class="no">X</span> <span class="o">=</span> <span class="n">pca</span><span class="p">.</span><span class="nf">transform</span><span class="p">(</span><span class="no">X_test</span><span class="p">)</span>
  <span class="n">explained_variance</span> <span class="o">=</span> <span class="n">pca</span><span class="p">.</span><span class="nf">explained_variance_ratio_</span>

  <span class="c1"># Percentage of variance explained for each components</span>
  <span class="nb">print</span><span class="p">(</span><span class="s1">'explained variance ratio (first two components): %s'</span>
        <span class="o">%</span> <span class="n">str</span><span class="p">(</span><span class="n">pca</span><span class="p">.</span><span class="nf">explained_variance_ratio_</span><span class="p">))</span>

  <span class="c1"># Fit Logistic Regression to the Training set</span></code></pre></figure>

<p><br /></p>
<h4>Explained Variance Example</h4>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">import</span> <span class="n">matplotlib</span><span class="p">.</span><span class="nf">pyplot</span> <span class="n">as</span> <span class="n">plt</span>
<span class="n">import</span> <span class="n">pandas</span> <span class="n">as</span> <span class="n">pd</span>
<span class="n">import</span> <span class="n">numpy</span> <span class="n">as</span> <span class="n">np</span>
<span class="n">import</span> <span class="n">seaborn</span> <span class="n">as</span> <span class="n">sns</span>
<span class="n">import</span> <span class="n">statsmodels</span><span class="p">.</span><span class="nf">api</span> <span class="n">as</span> <span class="n">sm</span>

<span class="n">from</span> <span class="n">sklearn</span><span class="p">.</span><span class="nf">preprocessing</span> <span class="n">import</span> <span class="no">StandardScaler</span>
<span class="n">from</span> <span class="n">sklearn</span><span class="p">.</span><span class="nf">decomposition</span> <span class="n">import</span> <span class="no">PCA</span>
<span class="n">from</span> <span class="n">sklearn</span><span class="p">.</span><span class="nf">linear_model</span> <span class="n">import</span> <span class="no">LogisticRegression</span>
<span class="n">from</span> <span class="n">sklearn</span><span class="p">.</span><span class="nf">feature_selection</span> <span class="n">import</span> <span class="no">RFE</span><span class="p">,</span> <span class="no">SelectKBest</span><span class="p">,</span> <span class="n">f_regression</span>
<span class="n">from</span> <span class="n">sklearn</span><span class="p">.</span><span class="nf">model_selection</span> <span class="n">import</span> <span class="n">train_test_split</span>
<span class="n">from</span> <span class="n">sklearn</span><span class="p">.</span><span class="nf">ensemble</span> <span class="n">import</span> <span class="no">ExtraTreesClassifier</span><span class="p">,</span> <span class="no">RandomForestClassifier</span>
<span class="n">from</span> <span class="n">sklearn</span><span class="p">.</span><span class="nf">metrics</span> <span class="n">import</span> <span class="n">accuracy_score</span><span class="p">,</span> <span class="n">confusion_matrix</span><span class="p">,</span> <span class="n">classification_report</span>
<span class="n">from</span> <span class="n">sklearn</span><span class="p">.</span><span class="nf">datasets</span> <span class="n">import</span> <span class="n">make_classification</span>

<span class="n">import</span> <span class="n">tensorflow</span> <span class="n">as</span> <span class="n">tf</span>

<span class="o">%</span><span class="n">matplotlib</span> <span class="n">inline</span></code></pre></figure>

<p><br /></p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">from</span> <span class="n">sklearn</span><span class="p">.</span><span class="nf">datasets</span> <span class="n">import</span> <span class="n">load_breast_cancer</span>

<span class="n">cancer</span> <span class="o">=</span> <span class="n">load_breast_cancer</span><span class="p">()</span>
<span class="nb">print</span><span class="p">(</span><span class="n">cancer</span><span class="p">.</span><span class="nf">keys</span><span class="p">())</span>
<span class="nb">print</span><span class="p">(</span><span class="s1">'target names '</span><span class="p">,</span> <span class="n">cancer</span><span class="p">[</span><span class="s1">'target_names'</span><span class="p">])</span>
<span class="c1"># print(cancer['DESCR'])</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="no">DataFrame</span><span class="p">(</span><span class="n">cancer</span><span class="p">[</span><span class="s1">'data'</span><span class="p">],</span><span class="n">columns</span><span class="o">=</span><span class="n">cancer</span><span class="p">[</span><span class="s1">'feature_names'</span><span class="p">])</span>
<span class="n">features_for_pca</span> <span class="o">=</span> <span class="n">df</span><span class="p">.</span><span class="nf">columns</span><span class="p">.</span><span class="nf">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
<span class="n">df</span><span class="p">[</span><span class="s1">'target'</span><span class="p">]</span> <span class="o">=</span> <span class="n">cancer</span><span class="p">[</span><span class="s1">'target'</span><span class="p">]</span>
<span class="nb">print</span><span class="p">(</span><span class="n">df</span><span class="p">.</span><span class="nf">groupby</span><span class="p">(</span><span class="s1">'target'</span><span class="p">)[</span><span class="s1">'target'</span><span class="p">].</span><span class="nf">count</span><span class="p">())</span>

<span class="n">scaler</span> <span class="o">=</span> <span class="no">StandardScaler</span><span class="p">()</span>
<span class="n">scaler</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="n">df</span><span class="p">.</span><span class="nf">drop</span><span class="p">(</span><span class="s1">'target'</span><span class="p">,</span> <span class="n">axis</span> <span class="o">=</span> <span class="mi">1</span><span class="p">))</span>
<span class="n">scaled_data</span> <span class="o">=</span> <span class="n">scaler</span><span class="p">.</span><span class="nf">transform</span><span class="p">(</span><span class="n">df</span><span class="p">.</span><span class="nf">drop</span><span class="p">(</span><span class="s1">'target'</span><span class="p">,</span> <span class="n">axis</span> <span class="o">=</span> <span class="mi">1</span><span class="p">))</span>

<span class="c1"># Replace spaces</span>
<span class="n">column_names</span>  <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="nb">name</span> <span class="k">in</span> <span class="n">df</span><span class="p">.</span><span class="nf">columns</span><span class="p">:</span>
    <span class="n">column_names</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nb">name</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="s2">" "</span><span class="p">,</span> <span class="s2">"_"</span><span class="p">))</span>

<span class="n">df</span><span class="p">.</span><span class="nf">columns</span> <span class="o">=</span> <span class="n">column_names</span>
<span class="c1"># print(df.columns)</span>

<span class="n">df</span><span class="p">.</span><span class="nf">head</span><span class="p">()</span></code></pre></figure>

<p><br /></p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="c1"># https://www.analyticsvidhya.com/blog/2016/03/practical-guide-principal-component-analysis-python/</span>

<span class="n">pca_full</span> <span class="o">=</span> <span class="no">PCA</span><span class="p">(</span><span class="n">n_components</span><span class="o">=</span><span class="n">features_for_pca</span><span class="p">)</span>
<span class="n">pca_full</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="n">scaled_data</span><span class="p">)</span>

<span class="c1"># Amount of variance for each component</span>
<span class="n">var</span> <span class="o">=</span> <span class="n">pca_full</span><span class="p">.</span><span class="nf">explained_variance_ratio_</span>

<span class="c1"># Cumulative sum</span>
<span class="n">cumsum</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">cumsum</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">round</span><span class="p">(</span><span class="n">pca_full</span><span class="p">.</span><span class="nf">explained_variance_ratio_</span><span class="p">,</span> <span class="n">decimals</span><span class="o">=</span><span class="mi">4</span><span class="p">)</span><span class="o">*</span><span class="mi">100</span><span class="p">)</span>

<span class="c1"># Find the number of pca components that account for 95% (~10)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="mi">4</span><span class="p">))</span>

<span class="c1"># plt.subplot(nrows=1, ncols=3, nplt=1)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">subplot</span><span class="p">(</span><span class="mi">121</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">var</span><span class="p">,</span> <span class="s1">'b-'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">title</span><span class="p">(</span><span class="s1">'Variance'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">xlabel</span><span class="p">(</span><span class="s1">'Components'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">ylabel</span><span class="p">(</span><span class="s1">'% Explained Variance'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">grid</span><span class="p">()</span>

<span class="n">plt</span><span class="p">.</span><span class="nf">subplot</span><span class="p">(</span><span class="mi">122</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">cumsum</span><span class="p">,</span> <span class="s1">'r-'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">title</span><span class="p">(</span><span class="s1">'Cumulative Sum'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">xlabel</span><span class="p">(</span><span class="s1">'Components'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">ylabel</span><span class="p">(</span><span class="s1">'Sum % Explained Variance'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">grid</span><span class="p">()</span></code></pre></figure>

:ET