I"—<ul>
  <li><a href="https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.AdaBoostClassifier.html">Documentation</a></li>
  <li><a href="https://nbviewer.jupyter.org/github/cliffwhitworth/machine_learning_notebooks/blob/master/CensusPredictions.ipynb">Usage</a></li>
</ul>

<p>Adaboost Classifier</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Optimize AdaBoostClassifier
from sklearn.model_selection import GridSearchCV
from sklearn.metrics import make_scorer

clf = AdaBoostClassifier(base_estimator=DecisionTreeClassifier())

# Provide hyperparameters
h_params = {'n_estimators':[50,120],
           'learning_rate':[0.1,0.5,1.],
           'base_estimator__min_samples_split':np.arange(2,8,2),
           'base_estimator__max_depth':np.arange(1,4,1)}
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>scorer = make_scorer(fbeta_score,beta=0.5)
grid_obj = GridSearchCV(clf, h_params, scorer)
grid_fit = grid_obj.fit(X_train, y_train)
best_clf = grid_fit.best_estimator_
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>predictions = best_clf.predict(X_test)

print(f'Accuracy: {accuracy_score(y_test, predictions):.4f}')
print(f'F-score: {fbeta_score(y_test, predictions, 0.5):.4f}')
print('\nModel\n-----')
print(best_clf)
</code></pre></div></div>

:ET