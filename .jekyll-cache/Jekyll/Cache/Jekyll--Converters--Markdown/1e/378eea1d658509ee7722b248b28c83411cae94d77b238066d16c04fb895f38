I"งห<p><br /></p>
<h4>Checklist</h4>
<ul>
<li>Is there an expert on the data</li>
<li>Supervised or Unsupervised</li>
<ul>
<li>Is there a target</li>
</ul>
<li>Regression or Classification</li>
<ul>
<li>Continuous or discrete values (class labels)</li>
<li>Predicting a value or identifying group membership</li>
</ul>
<li>Feature Selection</li>
<ul>
<li>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="c1"># Remove null features</span>
<span class="n">df</span><span class="p">.</span><span class="nf">dropna</span><span class="p">(</span><span class="n">how</span><span class="o">=</span><span class="s1">'all'</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="s1">'columns'</span><span class="p">,</span> <span class="n">inplace</span><span class="o">=</span><span class="no">True</span><span class="p">)</span></code></pre></figure>

</li>
<li>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="c1"># Remove null observations</span>
<span class="n">df</span><span class="p">.</span><span class="nf">isnull</span><span class="p">().</span><span class="nf">sum</span><span class="p">()</span>
<span class="n">df</span><span class="p">.</span><span class="nf">drop</span><span class="p">(</span><span class="n">df</span><span class="p">.</span><span class="nf">index</span><span class="p">[[</span><span class="n">null_rows</span><span class="p">]],</span> <span class="n">inplace</span><span class="o">=</span><span class="no">True</span><span class="p">)</span></code></pre></figure>

</li>
<li>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="c1"># Check for data leakage with expert</span></code></pre></figure>

</li>
<li>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="c1"># Check for features that have only one value</span>
<span class="n">constant_features</span> <span class="o">=</span> <span class="p">[</span>
    <span class="n">feat</span> <span class="k">for</span> <span class="n">feat</span> <span class="k">in</span> <span class="n">df</span><span class="p">.</span><span class="nf">columns</span> <span class="k">if</span> <span class="n">len</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="n">feat</span><span class="p">].</span><span class="nf">unique</span><span class="p">())</span> <span class="o">==</span> <span class="mi">1</span>
<span class="p">]</span></code></pre></figure>

</li>
<li>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="c1"># Check for features that have only zero values but have null values</span>
<span class="n">constant_features</span> <span class="o">=</span> <span class="p">[</span>
    <span class="n">feat</span> <span class="k">for</span> <span class="n">feat</span> <span class="k">in</span> <span class="n">df</span><span class="p">.</span><span class="nf">columns</span> <span class="k">if</span> <span class="n">len</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="n">feat</span><span class="p">].</span><span class="nf">fillna</span><span class="p">(</span><span class="mi">0</span><span class="p">).</span><span class="nf">unique</span><span class="p">())</span> <span class="o">==</span> <span class="mi">1</span>
<span class="p">]</span></code></pre></figure>

</li>
<li>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="c1"># Check for Quasi Constant Values, does not count null values</span>
<span class="k">for</span> <span class="n">col</span> <span class="k">in</span> <span class="n">df</span><span class="p">.</span><span class="nf">columns</span><span class="p">.</span><span class="nf">sort_values</span><span class="p">():</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">len</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="n">col</span><span class="p">].</span><span class="nf">unique</span><span class="p">())</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="p">):</span>
        <span class="nb">print</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="n">col</span><span class="p">].</span><span class="nf">value_counts</span><span class="p">())</span></code></pre></figure>

</li>
<li>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="c1"># Check for duplicate features</span>
<span class="n">duplicated_feat</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="n">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">len</span><span class="p">(</span><span class="n">dataset</span><span class="p">.</span><span class="nf">columns</span><span class="p">)):</span>
    <span class="k">if</span> <span class="n">i</span> <span class="o">%</span> <span class="mi">10</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>  <span class="c1"># Keep track of the loop</span>
        <span class="nb">print</span><span class="p">(</span><span class="s1">'loop tracker'</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span>

    <span class="n">col_1</span> <span class="o">=</span> <span class="n">dataset</span><span class="p">.</span><span class="nf">columns</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>

    <span class="k">for</span> <span class="n">col_2</span> <span class="k">in</span> <span class="n">dataset</span><span class="p">.</span><span class="nf">columns</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">:]:</span>
        <span class="k">if</span> <span class="n">dataset</span><span class="p">[</span><span class="n">col_1</span><span class="p">].</span><span class="nf">equals</span><span class="p">(</span><span class="n">dataset</span><span class="p">[</span><span class="n">col_2</span><span class="p">]):</span>
            <span class="n">duplicated_feat</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">col_2</span><span class="p">)</span></code></pre></figure>

</li>
</ul>
<li>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="c1"># Does target need engineering</span>
<span class="c1"># Check for other features that need preliminary engineering</span></code></pre></figure>

</li>
<li>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="c1"># Separate dataset into train, validate, and test</span>
<span class="c1"># Good practice to select the features by examining only the training set to avoid overfit</span>
<span class="n">from</span> <span class="n">sklearn</span><span class="p">.</span><span class="nf">model_selection</span> <span class="n">import</span> <span class="n">train_test_split</span>

<span class="no">X_train</span><span class="p">,</span> <span class="no">X_test</span><span class="p">,</span> <span class="n">y_train</span><span class="p">,</span> <span class="n">y_test</span> <span class="o">=</span> <span class="n">train_test_split</span><span class="p">(</span>
    <span class="n">df</span><span class="p">.</span><span class="nf">drop</span><span class="p">(</span><span class="n">labels</span><span class="o">=</span><span class="p">[</span><span class="s1">'target'</span><span class="p">],</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">),</span>
    <span class="n">df</span><span class="p">[</span><span class="s1">'target'</span><span class="p">],</span>
    <span class="n">test_size</span><span class="o">=</span><span class="mf">0.2</span><span class="p">)</span></code></pre></figure>

</li>
<li>More feature selection</li>
<ul>
<li>Check for correlated features</li>
<li>Feature importance</li>
<li>Mutual information</li>
<li>SelectKBest, SelectPercentile</li>
<li>Fisher Score - Chi-Square</li>
<li>ANOVA</li>
<li>ROC / AUC</li>
<li>Coefficients (Lasso)</li>
<li>Selection by model</li>
</ul>
<li>Feature Engineering</li>
<ul>
<li>Missing Data / Complete Case Analysis</li>
<li>Convert percentages to numerics</li>
<li>Outliers</li>
<li>Imputation</li>
<li>Model comparison</li>
<li>Reduce feature labels</li>
<li>Check for rare values</li>
<li>One hot encoding</li>
<li>Weight of evidence</li>
<li>Collinearity</li>
<li>Regularization</li>
</ul>
<li>Imbalanced Classes</li>
<ul>
<li>SMOTE</li>
<li>Up-Sample</li>
<li>Down-Sample</li>
</ul>
<li>Regression Models</li>
<ul>
<li>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="c1"># Linear Regression</span>
<span class="c1"># https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LinearRegression.html</span>
<span class="n">from</span> <span class="n">sklearn</span><span class="p">.</span><span class="nf">linear_model</span> <span class="n">import</span> <span class="no">LinearRegression</span>

<span class="n">model</span> <span class="o">=</span> <span class="no">LinearRegression</span><span class="p">()</span>
<span class="n">model</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="no">X_train</span><span class="p">,</span> <span class="n">y_train</span><span class="p">)</span>
<span class="n">predictions</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="nf">predict</span><span class="p">(</span><span class="no">X_test</span><span class="p">)</span></code></pre></figure>

</li>
<li>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="c1"># Polynomial Regression</span>
<span class="c1"># https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.PolynomialFeatures.html</span>
<span class="n">from</span> <span class="n">sklearn</span><span class="p">.</span><span class="nf">preprocessing</span> <span class="n">import</span> <span class="no">PolynomialFeatures</span>
<span class="n">from</span> <span class="n">sklearn</span><span class="p">.</span><span class="nf">linear_model</span> <span class="n">import</span> <span class="no">LinearRegression</span>

<span class="n">model</span> <span class="o">=</span> <span class="no">PolynomialFeatures</span><span class="p">(</span><span class="n">degree</span> <span class="o">=</span> <span class="mi">4</span><span class="p">)</span>
<span class="no">X_poly</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="nf">fit_transform</span><span class="p">(</span><span class="no">X_train</span><span class="p">)</span>
<span class="n">model</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="no">X_poly</span><span class="p">,</span> <span class="n">y_train</span><span class="p">)</span>
<span class="n">lin_reg</span> <span class="o">=</span> <span class="no">LinearRegression</span><span class="p">()</span>
<span class="n">lin_reg</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="no">X_poly</span><span class="p">,</span> <span class="n">y_train</span><span class="p">)</span>
<span class="n">lin_reg</span><span class="p">.</span><span class="nf">predict</span><span class="p">(</span><span class="n">model</span><span class="p">.</span><span class="nf">fit_transform</span><span class="p">(</span><span class="no">X_test</span><span class="p">))</span></code></pre></figure>

</li>
<li>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="c1"># Support Vector Regression</span>
<span class="c1"># https://scikit-learn.org/stable/modules/svm.html#regression</span>
<span class="n">from</span> <span class="n">sklearn</span><span class="p">.</span><span class="nf">svm</span> <span class="n">import</span> <span class="no">SVR</span>

<span class="n">model</span> <span class="o">=</span> <span class="no">SVR</span><span class="p">()</span>
<span class="n">model</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="no">X_train</span><span class="p">,</span> <span class="n">y_train</span><span class="p">)</span>
<span class="n">predictions</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="nf">predict</span><span class="p">(</span><span class="no">X_test</span><span class="p">)</span></code></pre></figure>

</li>
<li>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="c1"># Decision Tree Regression</span>
<span class="c1"># https://scikit-learn.org/stable/modules/tree.html#regression</span>
<span class="n">from</span> <span class="n">sklearn</span><span class="p">.</span><span class="nf">tree</span> <span class="n">import</span> <span class="no">DecisionTreeRegressor</span>

<span class="n">model</span> <span class="o">=</span> <span class="no">DecisionTreeRegressor</span><span class="p">()</span>
<span class="n">model</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="no">X_train</span><span class="p">,</span> <span class="n">y_train</span><span class="p">)</span>
<span class="n">predictions</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="nf">predict</span><span class="p">(</span><span class="no">X_test</span><span class="p">)</span></code></pre></figure>

</li>
<li>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="c1"># Random Forest Regression</span>
<span class="c1"># https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestRegressor.html</span>
<span class="n">from</span> <span class="n">sklearn</span><span class="p">.</span><span class="nf">ensemble</span> <span class="n">import</span> <span class="no">RandomForestRegressor</span>

<span class="n">model</span> <span class="o">=</span> <span class="no">RandomForestRegressor</span><span class="p">(</span><span class="n">n_estimators</span> <span class="o">=</span> <span class="mi">50</span><span class="p">)</span>
<span class="n">model</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="no">X_train</span><span class="p">,</span> <span class="n">y_train</span><span class="p">)</span>
<span class="n">predictions</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="nf">predict</span><span class="p">(</span><span class="no">X_test</span><span class="p">)</span></code></pre></figure>

</li>
<li>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="c1"># LassoCV Regression</span>
<span class="c1"># https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.Lasso.html</span>
<span class="n">from</span> <span class="n">sklearn</span><span class="p">.</span><span class="nf">linear_model</span> <span class="n">import</span> <span class="no">LassoCV</span>

<span class="n">model</span> <span class="o">=</span> <span class="no">LassoCV</span><span class="p">(</span><span class="n">cv</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span><span class="n">normalize</span><span class="o">=</span><span class="no">True</span><span class="p">,</span><span class="n">alphas</span><span class="o">=</span><span class="p">[</span><span class="o">.</span><span class="mo">0005</span><span class="p">])</span>
<span class="n">model</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="no">X_train</span><span class="p">,</span> <span class="n">y_train</span><span class="p">)</span>
<span class="n">predictions</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="nf">predict</span><span class="p">(</span><span class="no">X_test</span><span class="p">)</span></code></pre></figure>

</li>
<li>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="c1"># AdaBoost Regression</span>
<span class="c1"># https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.AdaBoostRegressor.html</span>
<span class="n">from</span> <span class="n">sklearn</span><span class="p">.</span><span class="nf">ensemble</span> <span class="n">import</span> <span class="no">AdaBoostRegressor</span>

<span class="n">model</span> <span class="o">=</span> <span class="no">AdaBoostRegressor</span><span class="p">(</span><span class="n">n_estimators</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span><span class="n">loss</span><span class="o">=</span><span class="s2">"linear"</span><span class="p">,</span><span class="n">learning_rate</span><span class="o">=.</span><span class="mo">005</span><span class="p">)</span>
<span class="n">model</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="no">X_train</span><span class="p">,</span> <span class="n">y_train</span><span class="p">)</span>
<span class="n">predictions</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="nf">predict</span><span class="p">(</span><span class="no">X_test</span><span class="p">)</span></code></pre></figure>

</li>
<li>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="c1"># Ridge Regression</span>
<span class="c1"># https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.Ridge.html</span>
<span class="n">from</span> <span class="n">sklearn</span><span class="p">.</span><span class="nf">linear_model</span> <span class="n">import</span> <span class="no">Rigde</span>

<span class="n">model</span> <span class="o">=</span> <span class="no">Ridge</span><span class="p">(</span><span class="n">random_state</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span><span class="n">normalize</span><span class="o">=</span><span class="no">True</span><span class="p">,</span><span class="n">alpha</span><span class="o">=.</span><span class="mo">001</span><span class="p">)</span>
<span class="n">model</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="no">X_train</span><span class="p">,</span> <span class="n">y_train</span><span class="p">)</span>
<span class="n">predictions</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="nf">predict</span><span class="p">(</span><span class="no">X_test</span><span class="p">)</span></code></pre></figure>

</li>
<li>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="c1"># ElasticNet Regression</span>
<span class="c1"># https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.ElasticNet.html</span>
<span class="n">from</span> <span class="n">sklearn</span><span class="p">.</span><span class="nf">linear_model</span> <span class="n">import</span> <span class="no">ElasticNet</span>

<span class="n">model</span> <span class="o">=</span> <span class="n">linear_model</span><span class="o">.</span><span class="no">ElasticNet</span><span class="p">(</span><span class="n">alpha</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">l1_ratio</span><span class="o">=</span><span class="mf">0.5</span><span class="p">,</span> <span class="n">normalize</span><span class="o">=</span><span class="no">False</span><span class="p">)</span>
<span class="n">model</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="no">X_train</span><span class="p">,</span> <span class="n">y_train</span><span class="p">)</span>
<span class="n">predictions</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="nf">predict</span><span class="p">(</span><span class="no">X_test</span><span class="p">)</span></code></pre></figure>

</li>
</ul>
<li>Classification Models</li>
<ul>
<li>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="c1"># Logistic Regression</span>
<span class="c1"># https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LogisticRegression.html</span>
<span class="n">from</span> <span class="n">sklearn</span><span class="p">.</span><span class="nf">linear_model</span> <span class="n">import</span> <span class="no">LogisticRegression</span>

<span class="n">model</span> <span class="o">=</span> <span class="no">LogisticRegression</span><span class="p">()</span>
<span class="n">model</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="no">X_train</span><span class="p">,</span><span class="n">y_train</span><span class="p">)</span>
<span class="n">predictions</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="nf">predict</span><span class="p">(</span><span class="no">X_test</span><span class="p">)</span></code></pre></figure>

</li>
<li>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="c1"># K-Nearest Neighbor Classification</span>
<span class="c1"># https://scikit-learn.org/stable/modules/generated/sklearn.neighbors.KNeighborsClassifier.html#sklearn.neighbors.KNeighborsClassifier</span>
<span class="n">from</span> <span class="n">sklearn</span><span class="p">.</span><span class="nf">neighbors</span> <span class="n">import</span> <span class="no">KNeighborsClassifier</span>

<span class="n">model</span> <span class="o">=</span> <span class="no">KNeighborsClassifier</span><span class="p">(</span><span class="n">n_neighbors</span> <span class="o">=</span> <span class="mi">5</span><span class="p">,</span> <span class="n">metric</span> <span class="o">=</span> <span class="s1">'minkowski'</span><span class="p">,</span> <span class="nb">p</span> <span class="o">=</span> <span class="mi">2</span><span class="p">)</span>
<span class="n">model</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="no">X_train</span><span class="p">,</span> <span class="n">y_train</span><span class="p">)</span>
<span class="n">prediction</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="nf">predict</span><span class="p">(</span><span class="no">X_test</span><span class="p">)</span></code></pre></figure>

</li>
<li>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="c1"># Support Vector Classification</span>
<span class="c1"># https://scikit-learn.org/stable/modules/generated/sklearn.svm.SVC.html#sklearn.svm.SVC</span>
<span class="n">from</span> <span class="n">sklearn</span><span class="p">.</span><span class="nf">svm</span> <span class="n">import</span> <span class="no">SVC</span>

<span class="n">model</span> <span class="o">=</span> <span class="no">SVC</span><span class="p">(</span><span class="n">kernel</span> <span class="o">=</span> <span class="s1">'linear'</span><span class="p">)</span>
<span class="n">model</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="no">X_train</span><span class="p">,</span> <span class="n">y_train</span><span class="p">)</span>
<span class="n">predictions</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="nf">predict</span><span class="p">(</span><span class="no">X_test</span><span class="p">)</span></code></pre></figure>

</li>
<li>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="c1"># Kernel SVM Classification</span>
<span class="c1"># https://scikit-learn.org/stable/auto_examples/svm/plot_custom_kernel.html#sphx-glr-auto-examples-svm-plot-custom-kernel-py</span>
<span class="n">from</span> <span class="n">sklearn</span><span class="p">.</span><span class="nf">svm</span> <span class="n">import</span> <span class="no">SVC</span>

<span class="n">model</span> <span class="o">=</span> <span class="no">SVC</span><span class="p">(</span><span class="n">kernel</span> <span class="o">=</span> <span class="s1">'rbf'</span><span class="p">)</span>
<span class="n">model</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="no">X_train</span><span class="p">,</span> <span class="n">y_train</span><span class="p">)</span>
<span class="n">predictions</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="nf">predict</span><span class="p">(</span><span class="no">X_test</span><span class="p">)</span></code></pre></figure>

</li>
<li>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="c1"># Naive Bayes Classification</span>
<span class="c1"># https://scikit-learn.org/stable/modules/naive_bayes.html</span>
<span class="n">from</span> <span class="n">sklearn</span><span class="p">.</span><span class="nf">naive_bayes</span> <span class="n">import</span> <span class="no">GaussianNB</span>

<span class="n">model</span> <span class="o">=</span> <span class="no">GaussianNB</span><span class="p">()</span>
<span class="n">model</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="no">X_train</span><span class="p">,</span> <span class="n">y_train</span><span class="p">)</span>
<span class="n">model</span><span class="p">.</span><span class="nf">predict</span><span class="p">(</span><span class="no">X_test</span><span class="p">)</span></code></pre></figure>

</li>
<li>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="c1"># Decision Tree Classification</span>
<span class="c1"># https://scikit-learn.org/stable/modules/tree.html#classification</span>
<span class="n">from</span> <span class="n">sklearn</span><span class="p">.</span><span class="nf">tree</span> <span class="n">import</span> <span class="no">DecisionTreeClassifier</span>

<span class="n">model</span> <span class="o">=</span> <span class="no">DecisionTreeClassifier</span><span class="p">(</span><span class="n">criterion</span> <span class="o">=</span> <span class="s1">'entropy'</span><span class="p">)</span>
<span class="n">model</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="no">X_train</span><span class="p">,</span> <span class="n">y_train</span><span class="p">)</span>
<span class="n">predictions</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="nf">predict</span><span class="p">(</span><span class="no">X_test</span><span class="p">)</span></code></pre></figure>

</li>
<li>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="c1"># Random Forest Classification</span>
<span class="c1"># https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html#sklearn.ensemble.RandomForestClassifier</span>
<span class="n">from</span> <span class="n">sklearn</span><span class="p">.</span><span class="nf">ensemble</span> <span class="n">import</span> <span class="no">RandomForestClassifier</span>

<span class="n">model</span> <span class="o">=</span> <span class="no">RandomForestClassifier</span><span class="p">(</span><span class="n">n_estimators</span> <span class="o">=</span> <span class="mi">50</span><span class="p">,</span> <span class="n">criterion</span> <span class="o">=</span> <span class="s1">'entropy'</span><span class="p">,</span> <span class="n">random_state</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span>
<span class="n">model</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="no">X_train</span><span class="p">,</span> <span class="n">y_train</span><span class="p">)</span>
<span class="n">predictions</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="nf">predict</span><span class="p">(</span><span class="no">X_test</span><span class="p">)</span></code></pre></figure>

</li>
</ul>
<li>Deep Learning Models</li>
<ul>
<li>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="c1"># Artificial Neural Network</span>
<span class="c1"># https://keras.io/getting-started/sequential-model-guide/</span>
<span class="n">from</span> <span class="n">keras</span><span class="p">.</span><span class="nf">models</span> <span class="n">import</span> <span class="no">Sequential</span>
<span class="n">from</span> <span class="n">keras</span><span class="p">.</span><span class="nf">layers</span> <span class="n">import</span> <span class="no">Dense</span>

<span class="n">model</span> <span class="o">=</span> <span class="no">Sequential</span><span class="p">()</span>
<span class="n">model</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="no">Dense</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="n">input_dim</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span> <span class="n">activation</span><span class="o">=</span><span class="s1">'relu'</span><span class="p">))</span>
<span class="n">model</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="no">Dense</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="n">activation</span><span class="o">=</span><span class="s1">'relu'</span><span class="p">))</span>
<span class="n">model</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="no">Dense</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">activation</span><span class="o">=</span><span class="s1">'sigmoid'</span><span class="p">))</span>
<span class="n">model</span><span class="p">.</span><span class="nf">compile</span><span class="p">(</span><span class="n">loss</span><span class="o">=</span><span class="s1">'binary_crossentropy'</span><span class="p">,</span> <span class="n">optimizer</span><span class="o">=</span><span class="s1">'adam'</span><span class="p">,</span> <span class="n">metrics</span><span class="o">=</span><span class="p">[</span><span class="s1">'mse'</span><span class="p">])</span>
<span class="n">model</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="no">X_train</span><span class="p">,</span> <span class="n">y_train</span><span class="p">,</span> <span class="n">epochs</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span> <span class="n">batch_size</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>

<span class="c1"># TensorFlow 2.x</span>
<span class="c1"># https://www.tensorflow.org/beta/guide/keras/overview</span>
<span class="ss">try:
  </span><span class="c1"># %tensorflow_version only exists in Colab.</span>
  <span class="o">%</span><span class="n">tensorflow_version</span> <span class="mi">2</span><span class="p">.</span><span class="nf">x</span>
<span class="n">except</span> <span class="no">Exception</span><span class="p">:</span>
  <span class="n">pass</span>

<span class="n">import</span> <span class="n">tensorflow</span> <span class="n">as</span> <span class="n">tf</span>

<span class="c1"># Regression</span>
<span class="n">model</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="nf">keras</span><span class="p">.</span><span class="nf">models</span><span class="o">.</span><span class="no">Sequential</span><span class="p">([</span>
  <span class="n">tf</span><span class="p">.</span><span class="nf">keras</span><span class="p">.</span><span class="nf">layers</span><span class="o">.</span><span class="no">Dense</span><span class="p">(</span><span class="mi">64</span><span class="p">,</span> <span class="n">input_shape</span><span class="o">=</span><span class="p">(</span><span class="no">D</span><span class="p">,),</span> <span class="n">activation</span><span class="o">=</span><span class="s1">'relu'</span><span class="p">),</span>
  <span class="c1"># Regression doesn't need the activation function</span>
  <span class="n">tf</span><span class="p">.</span><span class="nf">keras</span><span class="p">.</span><span class="nf">layers</span><span class="o">.</span><span class="no">Dense</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="p">])</span>

<span class="n">opt</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="nf">keras</span><span class="p">.</span><span class="nf">optimizers</span><span class="o">.</span><span class="no">Adam</span><span class="p">(</span><span class="mf">0.01</span><span class="p">)</span>
<span class="n">model</span><span class="p">.</span><span class="nf">compile</span><span class="p">(</span><span class="n">optimizer</span><span class="o">=</span><span class="n">opt</span><span class="p">,</span> <span class="n">loss</span><span class="o">=</span><span class="s1">'mae'</span><span class="p">)</span>
<span class="n">model</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="no">X_train</span><span class="p">,</span> <span class="n">y_train</span><span class="p">,</span> <span class="n">validation_data</span><span class="o">=</span><span class="p">(</span><span class="no">X_test</span><span class="p">,</span> <span class="n">y_test</span><span class="p">),</span> <span class="n">epochs</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>

<span class="c1"># Classification</span>
<span class="n">model</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="nf">keras</span><span class="p">.</span><span class="nf">models</span><span class="o">.</span><span class="no">Sequential</span><span class="p">([</span>
  <span class="n">tf</span><span class="p">.</span><span class="nf">keras</span><span class="p">.</span><span class="nf">layers</span><span class="o">.</span><span class="no">Dense</span><span class="p">(</span><span class="mi">64</span><span class="p">,</span> <span class="n">input_shape</span><span class="o">=</span><span class="p">(</span><span class="no">D</span><span class="p">,),</span> <span class="n">activation</span><span class="o">=</span><span class="s1">'relu'</span><span class="p">),</span>
  <span class="c1"># Sigmoid is good for binary classes</span>
  <span class="n">tf</span><span class="p">.</span><span class="nf">keras</span><span class="p">.</span><span class="nf">layers</span><span class="o">.</span><span class="no">Dense</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">activation</span><span class="o">=</span><span class="s1">'sigmoid'</span><span class="p">)</span>
<span class="p">])</span>

<span class="n">model</span><span class="p">.</span><span class="nf">compile</span><span class="p">(</span><span class="n">optimizer</span><span class="o">=</span><span class="s1">'adam'</span><span class="p">,</span>
              <span class="n">loss</span><span class="o">=</span><span class="s1">'binary_crossentropy'</span><span class="p">,</span>
              <span class="n">metrics</span><span class="o">=</span><span class="p">[</span><span class="s1">'accuracy'</span><span class="p">])</span>

<span class="n">model</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="no">X_train</span><span class="p">,</span> <span class="n">y_train</span><span class="p">,</span> <span class="n">validation_data</span><span class="o">=</span><span class="p">(</span><span class="no">X_test</span><span class="p">,</span> <span class="n">y_test</span><span class="p">),</span> <span class="n">epochs</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span></code></pre></figure>

</li>
<li>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="c1"># Convolutional Nueral Network</span>

<span class="n">import</span> <span class="n">tensorflow</span> <span class="n">as</span> <span class="n">tf</span>
<span class="n">from</span> <span class="n">tensorflow</span><span class="p">.</span><span class="nf">keras</span><span class="p">.</span><span class="nf">layers</span> <span class="n">import</span> <span class="no">Input</span><span class="p">,</span> <span class="no">Conv2D</span><span class="p">,</span> <span class="no">Dense</span><span class="p">,</span> <span class="no">Flatten</span><span class="p">,</span> <span class="no">Dropout</span><span class="p">,</span> <span class="no">MaxPooling2D</span>
<span class="n">from</span> <span class="n">tensorflow</span><span class="p">.</span><span class="nf">keras</span><span class="p">.</span><span class="nf">models</span> <span class="n">import</span> <span class="no">Model</span><span class="p">,</span> <span class="no">Sequential</span>

<span class="n">model</span> <span class="o">=</span> <span class="no">Sequential</span><span class="p">()</span>
<span class="n">model</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="no">Conv2D</span><span class="p">(</span><span class="mi">32</span><span class="p">,</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="n">input_shape</span> <span class="o">=</span> <span class="p">(</span><span class="mi">64</span><span class="p">,</span> <span class="mi">64</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="n">activation</span> <span class="o">=</span> <span class="s1">'relu'</span><span class="p">))</span>
<span class="n">model</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="no">MaxPooling2D</span><span class="p">(</span><span class="n">pool_size</span><span class="o">=</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="n">strides</span><span class="o">=</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">)))</span>
<span class="n">model</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="no">Conv2D</span><span class="p">(</span><span class="mi">32</span><span class="p">,</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="n">activation</span> <span class="o">=</span> <span class="s1">'relu'</span><span class="p">))</span>
<span class="n">model</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="no">MaxPooling2D</span><span class="p">(</span><span class="n">pool_size</span> <span class="o">=</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">)))</span>
<span class="n">model</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="no">Flatten</span><span class="p">())</span>
<span class="n">model</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="no">Dense</span><span class="p">(</span><span class="n">number_of_units</span><span class="p">,</span> <span class="n">activation</span><span class="o">=</span><span class="s1">'relu'</span><span class="p">))</span>
<span class="n">model</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="no">Dense</span><span class="p">(</span><span class="n">number_of_classes</span><span class="p">,</span> <span class="n">activation</span><span class="o">=</span><span class="s1">'softmax'</span><span class="p">))</span>
<span class="n">model</span><span class="p">.</span><span class="nf">compile</span><span class="p">(</span><span class="n">optimizer</span> <span class="o">=</span> <span class="s1">'adam'</span><span class="p">,</span> <span class="n">loss</span> <span class="o">=</span> <span class="s1">'binary_crossentropy'</span><span class="p">,</span> <span class="n">metrics</span> <span class="o">=</span> <span class="p">[</span><span class="s1">'accuracy'</span><span class="p">])</span>
<span class="n">model</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="no">X_train</span><span class="p">,</span> <span class="n">y_train</span><span class="p">,</span> <span class="n">epochs</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span> <span class="n">batch_size</span><span class="o">=</span><span class="mi">32</span><span class="p">)</span>

<span class="c1"># TensorFlow 2.x</span>
<span class="n">i</span> <span class="o">=</span> <span class="no">Input</span><span class="p">(</span><span class="n">shape</span><span class="o">=</span><span class="no">X_train</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">shape</span><span class="p">)</span>
<span class="n">x</span> <span class="o">=</span> <span class="no">Conv2D</span><span class="p">(</span><span class="mi">32</span><span class="p">,</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="n">strides</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">activation</span><span class="o">=</span><span class="s1">'relu'</span><span class="p">)(</span><span class="n">i</span><span class="p">)</span>
<span class="n">x</span> <span class="o">=</span> <span class="no">Conv2D</span><span class="p">(</span><span class="mi">64</span><span class="p">,</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="n">strides</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">activation</span><span class="o">=</span><span class="s1">'relu'</span><span class="p">)(</span><span class="n">x</span><span class="p">)</span>
<span class="n">x</span> <span class="o">=</span> <span class="no">Conv2D</span><span class="p">(</span><span class="mi">128</span><span class="p">,</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="n">strides</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">activation</span><span class="o">=</span><span class="s1">'relu'</span><span class="p">)(</span><span class="n">x</span><span class="p">)</span>
<span class="n">x</span> <span class="o">=</span> <span class="no">Flatten</span><span class="p">()(</span><span class="n">x</span><span class="p">)</span>
<span class="n">x</span> <span class="o">=</span> <span class="no">Dropout</span><span class="p">(</span><span class="mf">0.2</span><span class="p">)(</span><span class="n">x</span><span class="p">)</span>
<span class="n">x</span> <span class="o">=</span> <span class="no">Dense</span><span class="p">(</span><span class="mi">512</span><span class="p">,</span> <span class="n">activation</span><span class="o">=</span><span class="s1">'relu'</span><span class="p">)(</span><span class="n">x</span><span class="p">)</span>
<span class="n">x</span> <span class="o">=</span> <span class="no">Dropout</span><span class="p">(</span><span class="mf">0.2</span><span class="p">)(</span><span class="n">x</span><span class="p">)</span>
<span class="n">x</span> <span class="o">=</span> <span class="no">Dense</span><span class="p">(</span><span class="no">K</span><span class="p">,</span> <span class="n">activation</span><span class="o">=</span><span class="s1">'softmax'</span><span class="p">)(</span><span class="n">x</span><span class="p">)</span>

<span class="n">model</span> <span class="o">=</span> <span class="no">Model</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
<span class="n">model</span><span class="p">.</span><span class="nf">compile</span><span class="p">(</span><span class="n">optimizer</span><span class="o">=</span><span class="s1">'adam'</span><span class="p">,</span>
              <span class="n">loss</span><span class="o">=</span><span class="s1">'sparse_categorical_crossentropy'</span><span class="p">,</span>
              <span class="n">metrics</span><span class="o">=</span><span class="p">[</span><span class="s1">'accuracy'</span><span class="p">])</span>

<span class="n">model</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="no">X_train</span><span class="p">,</span> <span class="n">y_train</span><span class="p">,</span> <span class="n">validation_data</span><span class="o">=</span><span class="p">(</span><span class="no">X_test</span><span class="p">,</span> <span class="n">y_test</span><span class="p">),</span> <span class="n">epochs</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span></code></pre></figure>

</li>
<li>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="c1"># Recurrent Neural Network</span>
<span class="n">import</span> <span class="n">tensorflow</span> <span class="n">as</span> <span class="n">tf</span>
<span class="n">from</span> <span class="n">tensorflow</span><span class="p">.</span><span class="nf">keras</span><span class="p">.</span><span class="nf">layers</span> <span class="n">import</span> <span class="no">Input</span><span class="p">,</span> <span class="no">SimpleRNN</span><span class="p">,</span> <span class="no">LSTM</span><span class="p">,</span> <span class="no">Dense</span><span class="p">,</span> <span class="no">Dropout</span>
<span class="n">from</span> <span class="n">tensorflow</span><span class="p">.</span><span class="nf">keras</span><span class="p">.</span><span class="nf">models</span> <span class="n">import</span> <span class="no">Model</span><span class="p">,</span> <span class="no">Sequential</span>
<span class="n">from</span> <span class="n">tensorflow</span><span class="p">.</span><span class="nf">keras</span><span class="p">.</span><span class="nf">optimizers</span> <span class="n">import</span> <span class="no">Adam</span>

<span class="n">model</span> <span class="o">=</span> <span class="no">Sequential</span><span class="p">()</span>
<span class="n">model</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="no">LSTM</span><span class="p">(</span><span class="n">units</span> <span class="o">=</span> <span class="n">number_of_units</span><span class="p">,</span> <span class="n">return_sequences</span> <span class="o">=</span> <span class="no">True</span><span class="p">,</span> <span class="n">input_shape</span><span class="o">=</span><span class="p">(</span><span class="no">X</span><span class="p">.</span><span class="nf">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="no">X</span><span class="p">.</span><span class="nf">shape</span><span class="p">[</span><span class="mi">2</span><span class="p">])))</span>
<span class="n">model</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="no">Dropout</span><span class="p">(</span><span class="mf">0.2</span><span class="p">))</span>
<span class="n">model</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="no">Dense</span><span class="p">(</span><span class="n">y</span><span class="p">.</span><span class="nf">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">activation</span><span class="o">=</span><span class="s1">'softmax'</span><span class="p">))</span>
<span class="n">model</span><span class="p">.</span><span class="nf">compile</span><span class="p">(</span><span class="n">optimizer</span> <span class="o">=</span> <span class="s1">'adam'</span><span class="p">,</span> <span class="n">loss</span> <span class="o">=</span> <span class="s1">'mean_squared_error'</span><span class="p">)</span>
<span class="n">model</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="no">X_train</span><span class="p">,</span> <span class="n">y_train</span><span class="p">,</span> <span class="n">epochs</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span> <span class="n">batch_size</span> <span class="o">=</span> <span class="mi">32</span><span class="p">)</span>

<span class="c1"># TensorFlow 2.x</span>
<span class="n">i</span> <span class="o">=</span> <span class="no">Input</span><span class="p">(</span><span class="n">shape</span><span class="o">=</span><span class="no">X_train</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">shape</span><span class="p">)</span>
<span class="n">x</span> <span class="o">=</span> <span class="no">SimpleRNN</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="n">activation</span><span class="o">=</span><span class="s1">'relu'</span><span class="p">)(</span><span class="n">i</span><span class="p">)</span>
<span class="c1"># x = LSTM(128)(i)</span>
<span class="c1"># Softmax good for multiclass</span>
<span class="n">x</span> <span class="o">=</span> <span class="no">Dense</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="n">activation</span><span class="o">=</span><span class="s1">'softmax'</span><span class="p">)(</span><span class="n">x</span><span class="p">)</span>
<span class="n">model</span> <span class="o">=</span> <span class="no">Model</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
<span class="n">model</span><span class="p">.</span><span class="nf">compile</span><span class="p">(</span>
  <span class="n">loss</span><span class="o">=</span><span class="s1">'mse'</span><span class="p">,</span>
  <span class="n">optimizer</span><span class="o">=</span><span class="no">Adam</span><span class="p">(</span><span class="n">lr</span><span class="o">=</span><span class="mf">0.1</span><span class="p">),</span>
<span class="p">)</span>

<span class="n">model</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="n">x_train</span><span class="p">,</span> <span class="n">y_train</span><span class="p">,</span> <span class="n">validation_data</span><span class="o">=</span><span class="p">(</span><span class="n">x_test</span><span class="p">,</span> <span class="n">y_test</span><span class="p">),</span> <span class="n">epochs</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span></code></pre></figure>

</li>
</ul>
<li>Cross Validation</li>
<li>Grid Search</li>
<li>Metrics - https://scikit-learn.org/stable/modules/classes.html#module-sklearn.metrics</li>
<li>Regression Metrics</li>
<ul>
<li>R Squared</li>
<li>Explained Variance</li>
<li>Mean Absolute Error</li>
<li>Mean Squared Error</li>
<li>Mean Squared Log Error</li>
</ul>
<li>Classification Metrics</li>
<ul>
<li>Accuracy</li>
<li>Classification Report</li>
<li>Confusion Matrix</li>
<li>Matthews Correlation Coefficient</li>
<li>ROC / AUC</li>
</ul>
</ul>
:ET